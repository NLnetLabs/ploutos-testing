---
# matrix field notes:
#   pkg:         Used in multiple places:
#                  - as the DEB changelog file package name.
#                  - to select [package.metadata.deb_alt_base_<pkg>] as an alternate base to inherit from in Cargo.toml.
#                  - similarly to select [package.metadata.generate-rpm-alt-base-<pkg>] but for RPMs instead of DEBs.
#                  - in the `target/rpm/<pkg>.service` path to which the `systemd_service_unit_file` will be copied.
#                  - to form a `<pkg>_<os_name>_<os_rel>_<target>` GitHub Actions artifact filename. `<os_name>` and
#                    `<os_rel>` are derived from matrix field `os`. `<target>` comes from matrix field `target`.
#   image:       Has the form <os_name>:<os_rel>. Also see `os` below. Specifies the Docker image used by GitHub Actions
#                to run the job in which your application will be built (when not cross-compiled) and packaged, e.g.
#                ubuntu:jammy, debian:buster, centos:7, etc.
#   target:      if 'x86_64' the Rust program is compiled using cargo-deb/cargo generaste-rpm and stripped, otherwise it
#                is cross-compiled using cross [1]. Also if os_rel is an "old" version (e.g. xenial|bionic|stretch)
#                **and** [package.metadata.deb.variants.minimal] exists then the "minimal" variant will be used by
#                cargo-deb, otherwise variant "<os_name>-<os_rel>" will be used by cargo-deb, or if
#                [package.metadata.deb.variants.minimal-cross] exists then that variant will be used by cargo-deb.
#                if not cross-compiled then variant "<os_name>-<os_rel>-<target>" will be used by cargo-deb.
#                if the chosen variant doesn't exist the defaults will be used.
#   os:          (optional) Overrides the value of `image` when determining `os_name` and `os_rel`.
#   mode:        (optional) set to 'copy' for cross-compiled targets.
#   cargo_args:  (optional) can be used when testing, e.g. set to '--no-default-features' to speed up the build.
#   extra_build_args: (optional) Passed to `cargo build`.
#   systemd_service_unit_file: (optional)
#
# derived field notes:
#   os_name &    Determines the command used to install compilation dependencies (e.g. apt-get or yum) and the base set
#   os_rel:      of dependencies installed (jq, rpmlint and "Development Tools" on 'centos', or binutls,
#                build-essential, jq, lintian, pkg-config on 'debian' and 'ubuntu'). The set of packages installed can
#                be extended by setting 'rpm_extra_build_packages' or 'deb_extra_build_packages' respectively when
#                invoking the NLnet Labs Rust Cargo Packaging workflow from your `pkg.yml`.
#                The 'systemd_service_unit_file' and 'rpm_scriptlets_path' NLnet Labs Rust Cargo Packaging workflow
#                settings passed from your `pkg.yml` can be used to configure the RPM build on 'centos'.
#
# artifacts:
#   input:       When 'mode' is 'copy' expects a GitHub Actions artifact named 'tmp-cross-binaries-<target>' to exist
#                which contains the already cross-compiled application binary/binaries.
#   output:      Creates a GitHub Actions artifact named '<pkg>_<os_name>_<os_rel>_<target>' which will contain the
#                package to install.
#
# [1]: https://github.com/cross-rs/cross
#
pkg:
  - "mytest"
image:
  - "ubuntu:bionic"
  - "ubuntu:jammy"     # ubuntu/22.04
  - "ubuntu:noble"
  - "debian:stretch"
  - "debian:buster"
  - "debian:bullseye"
  - "debian:bookworm"
  - "debian:trixie"
  - 'centos:7'
  - 'almalinux:8'     # compatible with EOL centos:8
  - 'almalinux:9'
  # Enable when LXC images for Alma Linux become available
  # - 'almalinux:10'
target:
  - "x86_64"
deb_apt_key_url: 'https://raw.githubusercontent.com/NLnetLabs/ploutos-testing/main/repo/apt-key.asc'
deb_apt_source: 'deb https://raw.githubusercontent.com/NLnetLabs/ploutos-testing/main/repo/linux/${OS_NAME}/ ${OS_REL} main'
rpm_yum_key_url: 'https://raw.githubusercontent.com/NLnetLabs/ploutos-testing/main/repo/yum-key.asc'
rpm_yum_repo: |
  [nlnetlabs]
  name=NLnet Labs
  baseurl=https://raw.githubusercontent.com/NLnetLabs/ploutos-testing/main/repo/linux/centos/$releasever/main/$basearch
  enabled=1
include:
  # package for testing minimal-cross variant selection
  # needs to be both 'cross' and 'minimal' (i.e. an "old" O/S)
  - pkg: "mytest"
    image: "ubuntu:bionic"
    target: "arm-unknown-linux-gnueabihf"

  # package for the Raspberry Pi 1b as an ARMv6 cross compiled variant of the Debian Buster upon which
  # Raspbian 10 is based.
  - pkg: "mytest"
    image: "debian:buster"
    target: "arm-unknown-linux-gnueabihf"

  - pkg: "mytest"
    image: "centos:7"
    systemd_service_unit_file: "pkg/common/mytest.mytest.*"
    target: "x86_64"

  # CentOS 8 became EOL and is in theory still usable as a build container as there is still a Docker image
  # available, and package installation can be done by switching the yum config in the container to use packages
  # from the CentOS 8 vault rather than the now offline actual CentOS 8 repository. However, due to experiencing
  # lots of timed out connections to the vault we will build the CentOS 8 compatible package in a Rocky Linux
  # container instead, as Rocky Linux is 100% compatible with CentOS 8. The server at packages.nlnetlabs.nl
  # however has a repo for CentOS 8, not Rocky Linux, and determines the repo to publish in based on the name of
  # the archive that we produce below which is in turn based by default on the container image used to build. We
  # therefore in this case need to specify that the O/S we are building for has a different name than the Docker
  # image we are building it in.
  - pkg: "mytest"
    image: 'almalinux:8'
    os: 'centos:8'
    systemd_service_unit_file: "pkg/common/mytest.mytest.*"
    target: "x86_64"

  - pkg: "mytest"
    image: 'almalinux:9'
    systemd_service_unit_file: "pkg/common/mytest.mytest.*"
    target: "x86_64"

  # Enable when LXC images for Alma Linux become available
  # - pkg: "mytest"
  #   image: 'almalinux:10'
  #   systemd_service_unit_file: "pkg/common/mytest.mytest.*"
  #   target: "x86_64"
